/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeInterface extends utils.Interface {
  contractName: "Bridge";
  functions: {
    "addChain(uint256)": FunctionFragment;
    "isRedeemed(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(uint256,address,uint256,uint256,string,uint8,bytes32,bytes32)": FunctionFragment;
    "removeChain(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swap(uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRedeemed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addChain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRedeemed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChainAdded(uint256)": EventFragment;
    "ChainRemoved(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapInitialized(uint256,address,uint256,uint256,string)": EventFragment;
    "SwapRedeemed(uint256,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRedeemed"): EventFragment;
}

export type ChainAddedEvent = TypedEvent<[BigNumber], { chainId: BigNumber }>;

export type ChainAddedEventFilter = TypedEventFilter<ChainAddedEvent>;

export type ChainRemovedEvent = TypedEvent<[BigNumber], { chainId: BigNumber }>;

export type ChainRemovedEventFilter = TypedEventFilter<ChainRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapInitializedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  {
    tokenId: BigNumber;
    swapInitializer: string;
    chainSwapTo: BigNumber;
    nonce: BigNumber;
    uri: string;
  }
>;

export type SwapInitializedEventFilter = TypedEventFilter<SwapInitializedEvent>;

export type SwapRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    tokenId: BigNumber;
    swapRedeemer: string;
    chainSwapFrom: BigNumber;
    hash: string;
  }
>;

export type SwapRedeemedEventFilter = TypedEventFilter<SwapRedeemedEvent>;

export interface Bridge extends BaseContract {
  contractName: "Bridge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRedeemed(hash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      tokenId: BigNumberish,
      swapInitializer: string,
      chainSwapFrom: BigNumberish,
      nonce: BigNumberish,
      uri: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenId: BigNumberish,
      chainSwapTo: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addChain(
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRedeemed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    tokenId: BigNumberish,
    swapInitializer: string,
    chainSwapFrom: BigNumberish,
    nonce: BigNumberish,
    uri: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeChain(
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenId: BigNumberish,
    chainSwapTo: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addChain(chainId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isRedeemed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      tokenId: BigNumberish,
      swapInitializer: string,
      chainSwapFrom: BigNumberish,
      nonce: BigNumberish,
      uri: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swap(
      tokenId: BigNumberish,
      chainSwapTo: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainAdded(uint256)"(chainId?: BigNumberish | null): ChainAddedEventFilter;
    ChainAdded(chainId?: BigNumberish | null): ChainAddedEventFilter;

    "ChainRemoved(uint256)"(
      chainId?: BigNumberish | null
    ): ChainRemovedEventFilter;
    ChainRemoved(chainId?: BigNumberish | null): ChainRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapInitialized(uint256,address,uint256,uint256,string)"(
      tokenId?: BigNumberish | null,
      swapInitializer?: string | null,
      chainSwapTo?: BigNumberish | null,
      nonce?: null,
      uri?: null
    ): SwapInitializedEventFilter;
    SwapInitialized(
      tokenId?: BigNumberish | null,
      swapInitializer?: string | null,
      chainSwapTo?: BigNumberish | null,
      nonce?: null,
      uri?: null
    ): SwapInitializedEventFilter;

    "SwapRedeemed(uint256,address,uint256,bytes32)"(
      tokenId?: BigNumberish | null,
      swapRedeemer?: string | null,
      chainSwapFrom?: BigNumberish | null,
      hash?: null
    ): SwapRedeemedEventFilter;
    SwapRedeemed(
      tokenId?: BigNumberish | null,
      swapRedeemer?: string | null,
      chainSwapFrom?: BigNumberish | null,
      hash?: null
    ): SwapRedeemedEventFilter;
  };

  estimateGas: {
    addChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRedeemed(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      tokenId: BigNumberish,
      swapInitializer: string,
      chainSwapFrom: BigNumberish,
      nonce: BigNumberish,
      uri: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenId: BigNumberish,
      chainSwapTo: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRedeemed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      tokenId: BigNumberish,
      swapInitializer: string,
      chainSwapFrom: BigNumberish,
      nonce: BigNumberish,
      uri: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenId: BigNumberish,
      chainSwapTo: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
